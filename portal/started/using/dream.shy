title "工作空间"
brief `ContextOS 云操作系统，使用工作空间的方式来管理多项目。每个工作空间都有自己的官网、桌面、后台、文档、软件、配置、数据等。在一台设备上，可以创建任意多个工作空间。`
image material dream.png

chapter "批量操作"
spark `在工具栏中，有几个批量操作空间的按键。`

section "创建空间"
spark `点击工具栏中的 + ，打开创建对话框，输入新空间名，即可创建空间。参数详情如下：`
order `名称，必选，指定新空间的名称。
仓库，可选，指定一个 git 仓库的地址，系统会自动下载代码库，并作为空间的文件目录。
镜像，可选，指定一个镜像地址，系统会自动下载可执行的程序文件，用来启动新的工作空间。
`
spark `新空间创建成功后，系统会自动刷新列表，即可看到新创建的空间在最前面。`

section "启动空间"
spark `点击工具栏中的启动按钮，打开启动对话框，即可启动一个或多个空间。
参数名称不填，直接点击对话框中的启动按钮，则会启动所有未启动的空间。
如果指定空间名称，则会启动指定的空间。
`

section "停止空间"
spark `同启动空间一样，可以用来停止一个或多个空间。`

section "构建空间"
spark `同启动空间一样，可以用来构建一个或多个空间。
构建空间，会调用 Golang 编译器，对空间的代码库进行编译，构建出新的可执行文件，并重启空间。
`

section "发布空间"
spark `同启动空间一样，可以用来发布一个或多个空间。
发布空间，会调用 Golang 编译器，对空间的代码库进行交叉编译，
编译出 Windows、Mac、Linux 等系统上的可执行文件。
`

chapter "空间操作"
spark `在空间列表中的每个卡片上，可以直接操作每个空间。
在卡片上，会显示图标、名称、代码库版本、构建时间、常驻空间标识、私有空间标识、代码库地址等信息。
在卡片底部，会显示操作按键，
`
order `
官网，打开空间的官网，显示空间的简要信息。
桌面，打开空间的桌面，通过图标和窗口的方式，操作空间的应用。
后台，打开空间的后台，通过管理后台的方式，操作空间的应用。
文档，打开空间的文档，查看空间的项目信息。
更多，显示更多的操作。
源码，打开空间的代码库，查看空间代码的状态信息，并进行相关操作。
编程，打开空间的编辑器，直接现场编程开发。
构建，打开空间的编译器，交叉编译并发布空间。
环境，打开空间的环境，查看空间的运行信息。
终端，打开空间的终端，通过命令行的方式，操作空间的应用。
打开，打开空间首页。
设置，设置空间的启动方式与权限控制。
清理，清理空间的文件目录。
删除，删除空间的所有信息。
`

section "打开空间"
spark `打开空间，根据空间的配置，打开不同的应用。`

section "设置空间"
spark `空间的启动方式，手动启动、常驻启动。常驻启动是在系统启动后，自动启动空间`
spark `空间的权限控制，公开访问、私有访问。公开访问是所有人可以看到此空间，并使用有权限的功能。`

section "清理空间"
spark `清理空间，删除了空间的目录，节省了磁盘空间，但还保留了一些基础信息，可以重新启动空间。`